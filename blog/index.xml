<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on %_</title>
    <link>https://michaelgainyo.github.io/blog/</link>
    <description>Recent content in Blogs on %_</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jan 2023 12:15:43 +0100</lastBuildDate><atom:link href="https://michaelgainyo.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up A Custom Domain Name for Django Development Server on a Mac</title>
      <link>https://michaelgainyo.github.io/blog/setting-up-custom-domain-name-for-django-dev-server-on-mac/</link>
      <pubDate>Thu, 19 Jan 2023 12:15:43 +0100</pubDate>
      
      <guid>https://michaelgainyo.github.io/blog/setting-up-custom-domain-name-for-django-dev-server-on-mac/</guid>
      <description>Setting up a custom domain name for the Django development server on a Mac is a simple process that can be completed in a few steps.
Make sure that the Django development server is running on your local machine by navigating to the root directory of your Django project and running the following command: ./manage.py runserver Open the terminal and edit the /etc/hosts file by running the command: sudo nano /etc/hosts This file is used to map hostnames to IP addresses on a local machine.</description>
    </item>
    
    <item>
      <title>Dynamic Serialization With Django Rest Framework</title>
      <link>https://michaelgainyo.github.io/blog/dynamic-serialization-with-django-rest-framework/</link>
      <pubDate>Mon, 09 Jan 2023 23:18:45 +0100</pubDate>
      
      <guid>https://michaelgainyo.github.io/blog/dynamic-serialization-with-django-rest-framework/</guid>
      <description>Suppose we have two django models, Product and Size, defined as follows:
class Product(models.Model): name = models.CharField(max_length=99) description = models.TextField(null=True, blank=True) class Size(models.Model): product = models.ForeignKey(&amp;#39;Product&amp;#39;, related_name=&amp;#39;sizes&amp;#39;, on_delete=models.CASCADE) code = models.CharField(max_length=10) text = models.CharField(max_length=20) quantity = models.PositiveIntegerField(default=1) On a product detail view page, we might want to return a JSON response similar to this:
{ &amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;Fur Flight Jacket&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Jacket made of textured tear-resistant ripstop fabric&amp;#34;, &amp;#34;sizes&amp;#34;: [ { &amp;#34;code&amp;#34;: &amp;#34;xs&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Extra-Small&amp;#34;, &amp;#34;quantity&amp;#34;: 15 }, { &amp;#34;code&amp;#34;: &amp;#34;s&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Small&amp;#34;, &amp;#34;quantity&amp;#34;: 20 }, { &amp;#34;code&amp;#34;: &amp;#34;m&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Medium&amp;#34;, &amp;#34;quantity&amp;#34;: 0 }, { &amp;#34;code&amp;#34;: &amp;#34;l&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Large&amp;#34;, &amp;#34;quantity&amp;#34;: 10 }, { &amp;#34;code&amp;#34;: &amp;#34;xl&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;Extra-Large&amp;#34;, &amp;#34;quantity&amp;#34;: 5 } ] } This response includes not only the id, name, and description fields of a product, but also a list of its available sizes.</description>
    </item>
    
  </channel>
</rss>
